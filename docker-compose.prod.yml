version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: qr-scanner-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: qrscanner
      POSTGRES_USER: qruser
      POSTGRES_PASSWORD: ${DB_PASSWORD:-qrpassword123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - qr-scanner-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U qruser -d qrscanner"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for Session Storage
  redis:
    image: redis:7-alpine
    container_name: qr-scanner-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - qr-scanner-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend Service (Python Flask)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - ENVIRONMENT=production
    container_name: qr-scanner-backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://qruser:${DB_PASSWORD:-qrpassword123}@postgres:5432/qrscanner
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-production-secret-key-change-this}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://frontend:3000,http://localhost:3000}
    volumes:
      - backend_logs:/app/logs
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - qr-scanner-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Frontend Service (Node.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    container_name: qr-scanner-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - API_URL=http://backend:5000
      - SESSION_SECRET=${SESSION_SECRET:-your-session-secret-change-this}
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - frontend_logs:/usr/src/app/logs
      - /usr/src/app/node_modules
    depends_on:
      - backend
      - redis
    networks:
      - qr-scanner-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: qr-scanner-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - qr-scanner-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: qr-scanner-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - qr-scanner-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Monitoring with Grafana
  grafana:
    image: grafana/grafana-enterprise:latest
    container_name: qr-scanner-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana-provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - qr-scanner-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      device: ${PG_DATA_PATH:-./data/postgres}
      o: bind
  redis_data:
    driver: local
    driver_opts:
      type: none
      device: ${REDIS_DATA_PATH:-./data/redis}
      o: bind
  backend_logs:
    driver: local
    driver_opts:
      type: none
      device: ${BACKEND_LOGS_PATH:-./logs/backend}
      o: bind
  frontend_logs:
    driver: local
    driver_opts:
      type: none
      device: ${FRONTEND_LOGS_PATH:-./logs/frontend}
      o: bind
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      device: ${NGINX_LOGS_PATH:-./logs/nginx}
      o: bind
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      device: ${PROMETHEUS_DATA_PATH:-./data/prometheus}
      o: bind
  grafana_data:
    driver: local
    driver_opts:
      type: none
      device: ${GRAFANA_DATA_PATH:-./data/grafana}
      o: bind

networks:
  qr-scanner-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16